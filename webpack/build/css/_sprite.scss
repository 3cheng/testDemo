/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$icon-douban-name: 'icon_douban';
$icon-douban-x: 0px;
$icon-douban-y: 0px;
$icon-douban-offset-x: 0px;
$icon-douban-offset-y: 0px;
$icon-douban-width: 54px;
$icon-douban-height: 54px;
$icon-douban-total-width: 54px;
$icon-douban-total-height: 216px;
$icon-douban-image: '../images/sprite.png';
$icon-douban: (0px, 0px, 0px, 0px, 54px, 54px, 54px, 216px, '../images/sprite.png', 'icon_douban', );
$icon-qq-name: 'icon_qq';
$icon-qq-x: 0px;
$icon-qq-y: 54px;
$icon-qq-offset-x: 0px;
$icon-qq-offset-y: -54px;
$icon-qq-width: 54px;
$icon-qq-height: 54px;
$icon-qq-total-width: 54px;
$icon-qq-total-height: 216px;
$icon-qq-image: '../images/sprite.png';
$icon-qq: (0px, 54px, 0px, -54px, 54px, 54px, 54px, 216px, '../images/sprite.png', 'icon_qq', );
$icon-renren-name: 'icon_renren';
$icon-renren-x: 0px;
$icon-renren-y: 108px;
$icon-renren-offset-x: 0px;
$icon-renren-offset-y: -108px;
$icon-renren-width: 54px;
$icon-renren-height: 54px;
$icon-renren-total-width: 54px;
$icon-renren-total-height: 216px;
$icon-renren-image: '../images/sprite.png';
$icon-renren: (0px, 108px, 0px, -108px, 54px, 54px, 54px, 216px, '../images/sprite.png', 'icon_renren', );
$icon-weibo-name: 'icon_weibo';
$icon-weibo-x: 0px;
$icon-weibo-y: 162px;
$icon-weibo-offset-x: 0px;
$icon-weibo-offset-y: -162px;
$icon-weibo-width: 54px;
$icon-weibo-height: 54px;
$icon-weibo-total-width: 54px;
$icon-weibo-total-height: 216px;
$icon-weibo-image: '../images/sprite.png';
$icon-weibo: (0px, 162px, 0px, -162px, 54px, 54px, 54px, 216px, '../images/sprite.png', 'icon_weibo', );
$spritesheet-width: 54px;
$spritesheet-height: 216px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($icon-douban, $icon-qq, $icon-renren, $icon-weibo, );
$spritesheet: (54px, 216px, '../images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
